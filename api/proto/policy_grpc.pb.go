// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: policy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PolicyEngineService_Generate_FullMethodName   = "/protocols.PolicyEngineService/Generate"
	PolicyEngineService_GetResults_FullMethodName = "/protocols.PolicyEngineService/GetResults"
	PolicyEngineService_Configure_FullMethodName  = "/protocols.PolicyEngineService/Configure"
)

// PolicyEngineServiceClient is the client API for PolicyEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyEngineServiceClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	GetResults(ctx context.Context, in *GetResultsRequest, opts ...grpc.CallOption) (*GetResultsResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
}

type policyEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyEngineServiceClient(cc grpc.ClientConnInterface) PolicyEngineServiceClient {
	return &policyEngineServiceClient{cc}
}

func (c *policyEngineServiceClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, PolicyEngineService_Generate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyEngineServiceClient) GetResults(ctx context.Context, in *GetResultsRequest, opts ...grpc.CallOption) (*GetResultsResponse, error) {
	out := new(GetResultsResponse)
	err := c.cc.Invoke(ctx, PolicyEngineService_GetResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyEngineServiceClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, PolicyEngineService_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyEngineServiceServer is the server API for PolicyEngineService service.
// All implementations must embed UnimplementedPolicyEngineServiceServer
// for forward compatibility
type PolicyEngineServiceServer interface {
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	GetResults(context.Context, *GetResultsRequest) (*GetResultsResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	mustEmbedUnimplementedPolicyEngineServiceServer()
}

// UnimplementedPolicyEngineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyEngineServiceServer struct {
}

func (UnimplementedPolicyEngineServiceServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedPolicyEngineServiceServer) GetResults(context.Context, *GetResultsRequest) (*GetResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedPolicyEngineServiceServer) Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedPolicyEngineServiceServer) mustEmbedUnimplementedPolicyEngineServiceServer() {}

// UnsafePolicyEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyEngineServiceServer will
// result in compilation errors.
type UnsafePolicyEngineServiceServer interface {
	mustEmbedUnimplementedPolicyEngineServiceServer()
}

func RegisterPolicyEngineServiceServer(s grpc.ServiceRegistrar, srv PolicyEngineServiceServer) {
	s.RegisterService(&PolicyEngineService_ServiceDesc, srv)
}

func _PolicyEngineService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyEngineServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyEngineService_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyEngineServiceServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyEngineService_GetResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyEngineServiceServer).GetResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyEngineService_GetResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyEngineServiceServer).GetResults(ctx, req.(*GetResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyEngineService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyEngineServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyEngineService_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyEngineServiceServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyEngineService_ServiceDesc is the grpc.ServiceDesc for PolicyEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocols.PolicyEngineService",
	HandlerType: (*PolicyEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _PolicyEngineService_Generate_Handler,
		},
		{
			MethodName: "GetResults",
			Handler:    _PolicyEngineService_GetResults_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _PolicyEngineService_Configure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}
